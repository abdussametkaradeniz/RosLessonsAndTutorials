// Generated by gencpp from file suruiha_gazebo_plugins/UAVBattery.msg
// DO NOT EDIT!


#ifndef SURUIHA_GAZEBO_PLUGINS_MESSAGE_UAVBATTERY_H
#define SURUIHA_GAZEBO_PLUGINS_MESSAGE_UAVBATTERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace suruiha_gazebo_plugins
{
template <class ContainerAllocator>
struct UAVBattery_
{
  typedef UAVBattery_<ContainerAllocator> Type;

  UAVBattery_()
    : capacity(0.0)
    , remaining(0.0)  {
    }
  UAVBattery_(const ContainerAllocator& _alloc)
    : capacity(0.0)
    , remaining(0.0)  {
  (void)_alloc;
    }



   typedef float _capacity_type;
  _capacity_type capacity;

   typedef float _remaining_type;
  _remaining_type remaining;





  typedef boost::shared_ptr< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> const> ConstPtr;

}; // struct UAVBattery_

typedef ::suruiha_gazebo_plugins::UAVBattery_<std::allocator<void> > UAVBattery;

typedef boost::shared_ptr< ::suruiha_gazebo_plugins::UAVBattery > UAVBatteryPtr;
typedef boost::shared_ptr< ::suruiha_gazebo_plugins::UAVBattery const> UAVBatteryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator1> & lhs, const ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator2> & rhs)
{
  return lhs.capacity == rhs.capacity &&
    lhs.remaining == rhs.remaining;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator1> & lhs, const ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace suruiha_gazebo_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4d640e4248e55d7707590dcac4fd6d7";
  }

  static const char* value(const ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4d640e4248e55d7ULL;
  static const uint64_t static_value2 = 0x707590dcac4fd6d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "suruiha_gazebo_plugins/UAVBattery";
  }

  static const char* value(const ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 capacity\n"
"float32 remaining\n"
;
  }

  static const char* value(const ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.capacity);
      stream.next(m.remaining);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UAVBattery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::suruiha_gazebo_plugins::UAVBattery_<ContainerAllocator>& v)
  {
    s << indent << "capacity: ";
    Printer<float>::stream(s, indent + "  ", v.capacity);
    s << indent << "remaining: ";
    Printer<float>::stream(s, indent + "  ", v.remaining);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SURUIHA_GAZEBO_PLUGINS_MESSAGE_UAVBATTERY_H
