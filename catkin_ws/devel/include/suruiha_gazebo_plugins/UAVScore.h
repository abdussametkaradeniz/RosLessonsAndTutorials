// Generated by gencpp from file suruiha_gazebo_plugins/UAVScore.msg
// DO NOT EDIT!


#ifndef SURUIHA_GAZEBO_PLUGINS_MESSAGE_UAVSCORE_H
#define SURUIHA_GAZEBO_PLUGINS_MESSAGE_UAVSCORE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace suruiha_gazebo_plugins
{
template <class ContainerAllocator>
struct UAVScore_
{
  typedef UAVScore_<ContainerAllocator> Type;

  UAVScore_()
    : area_score(0.0)
    , detection_score(0.0)
    , tracking_score(0.0)
    , total_score(0.0)  {
    }
  UAVScore_(const ContainerAllocator& _alloc)
    : area_score(0.0)
    , detection_score(0.0)
    , tracking_score(0.0)
    , total_score(0.0)  {
  (void)_alloc;
    }



   typedef float _area_score_type;
  _area_score_type area_score;

   typedef float _detection_score_type;
  _detection_score_type detection_score;

   typedef float _tracking_score_type;
  _tracking_score_type tracking_score;

   typedef float _total_score_type;
  _total_score_type total_score;





  typedef boost::shared_ptr< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> const> ConstPtr;

}; // struct UAVScore_

typedef ::suruiha_gazebo_plugins::UAVScore_<std::allocator<void> > UAVScore;

typedef boost::shared_ptr< ::suruiha_gazebo_plugins::UAVScore > UAVScorePtr;
typedef boost::shared_ptr< ::suruiha_gazebo_plugins::UAVScore const> UAVScoreConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator1> & lhs, const ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator2> & rhs)
{
  return lhs.area_score == rhs.area_score &&
    lhs.detection_score == rhs.detection_score &&
    lhs.tracking_score == rhs.tracking_score &&
    lhs.total_score == rhs.total_score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator1> & lhs, const ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace suruiha_gazebo_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "676b2308c495d87cb6b764cf76e13614";
  }

  static const char* value(const ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x676b2308c495d87cULL;
  static const uint64_t static_value2 = 0xb6b764cf76e13614ULL;
};

template<class ContainerAllocator>
struct DataType< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "suruiha_gazebo_plugins/UAVScore";
  }

  static const char* value(const ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 area_score\n"
"float32 detection_score\n"
"float32 tracking_score\n"
"float32 total_score\n"
;
  }

  static const char* value(const ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.area_score);
      stream.next(m.detection_score);
      stream.next(m.tracking_score);
      stream.next(m.total_score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UAVScore_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::suruiha_gazebo_plugins::UAVScore_<ContainerAllocator>& v)
  {
    s << indent << "area_score: ";
    Printer<float>::stream(s, indent + "  ", v.area_score);
    s << indent << "detection_score: ";
    Printer<float>::stream(s, indent + "  ", v.detection_score);
    s << indent << "tracking_score: ";
    Printer<float>::stream(s, indent + "  ", v.tracking_score);
    s << indent << "total_score: ";
    Printer<float>::stream(s, indent + "  ", v.total_score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SURUIHA_GAZEBO_PLUGINS_MESSAGE_UAVSCORE_H
